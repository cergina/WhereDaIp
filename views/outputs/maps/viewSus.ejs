<!DOCTYPE html>
<html lang="en">
<!-- head -->
<%- include('../../_headerOutMap') %> 
<body>
    
    <div class="container" id="MY_CONTAINER_ID" style="justify-content:center; vertical-align: middle; align-items: center;"> 
        <!-- alert at top -->
        <div class="alert alert-info">
            <h1 class="mb-4 display-4">Threat types</h1> 
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/presentation/">Results</a></li>
                    <li class="breadcrumb-item"><a href="/maps">Maps</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Categorized suspect origins</li>
                </ol> 
              </nav>
        </div> 

        <!-- navigacny panel pre zem a tabulku -->
        <ul style="justify-content:center;" class="nav nav-tabs" id="myTab" role="tablist"></ul>
        <!-- obsah zem a tabulka -->
        <div style="justify-content:center; margin: 0 auto; vertical-align: middle;" class="tab-content" id="myTabContent"></div> 

        <div class="center">
            <small class="form-text text-muted" id="datetime">Data gotten at [time here].</small>
        </div>

        <!-- footer with name, year, FIIT, www -->
        <%- include('../../_footer') %> 
    </div>



    <script>
        var watTab = document.getElementById('myTab');
        var watTabContent = document.getElementById('myTabContent');
        fetch("/accessible/map/mapTopSusTags.json")
            .then(response => response.json())
            .then(async data => {
              // experimental
              for (let i=0; i<data.count; i++) {
                var li = document.createElement('li')
                li.classList.add("nav-item")
                var a = document.createElement('a')
                a.classList.add("nav-link"); a.id = `tab-${i}`; a.href = `#data-${i}`; a.role="tab"; a.setAttribute("data-toggle", "tab");  a.setAttribute("aria-selected", "false");
                if (i === 0) {a.classList.add("active")};
                a.textContent += `Type ${i+1}`
                li.appendChild(a)
                watTab.appendChild(li)
              }
              
              for (let t=0; t<data.count; t++) {
                var pane = document.createElement("div"); pane.classList.add("tab-pane"); pane.classList.add("fade"); pane.classList.add("show"); pane.classList.add("active");
                pane.role = "tabpanel"; pane.id = `data-${t}`
                pane.style = "justify-content:center; vertical-align: middle; align-items: center;"
                var earth = document.createElement("div"); earth.id = `earth_div${t}`; earth.classList.add("center"); earth.classList.add("mw-80");
                earth.style = style="border:1px solid gray; padding:2px;"
                var wrapper = document.createElement("div"); wrapper.id = `wrapper${t}`; wrapper.style = style="justify-content:center; vertical-align: middle; align-items: center;"

                pane.appendChild(earth);
                pane.appendChild(wrapper);
                watTabContent.appendChild(pane);
              }
              // end experimental
              

              // test
              var earths = []
              for (let i=0; i<data.count; i++) {
                console.log(data.covers[i].name)

                // WebGL
                earths[i] = new WE.map(`earth_div${i}`, {
                  'zooming': data.covers[i].options.zooming, 'tilting': data.covers[i].options.tilting, 'dragging': data.covers[i].options.dragging, 'maxZoom': data.covers[i].options.maxZoom,
                  'sky': data.covers[i].options.sky, 'atmosphere': data.covers[i].options.atmosphere, 'minAltitude': data.covers[i].options.minAltitude, 'maxAltitude': data.covers[i].options.maxAltitude
                });
                await WE.tileLayer('/{z}/{x}/{y}.jpg', {
                  tileSize: data.covers[i].tiles.tileSize,
                  bounds: data.covers[i].tiles.bounds,
                  minZoom: data.covers[i].tiles.minZoom,
                  maxZoom: data.covers[i].tiles.maxZoom, // urcuje kolko si max vypytat tiles zo servera
                  attribution: data.covers[i].tiles.attribution,
                  tms: data.covers[i].tiles.tms,
                }).addTo(earths[i]);

                for (var point of data.covers[i].points) {
                  var marker = WE.marker([point.lat, point.lon]).addTo(earths[i]);
                  marker.bindPopup(point.htmlSnippet, {maxWidth: 300, closeButton: true}).closePopup();
                }
                
                try {
                  await earths[i].setView([data.covers[i].points[0].lat, data.covers[i].points[0].lon], data.covers[i].options.zoom);
                } catch (e) {console.log(e)}

                // GridJS
                var wrapper = document.getElementById(`wrapper${i}`)
                await new gridjs.Grid({ 
                  columns: data.covers[i].tableNames,
                  data: data.covers[i].tableValues,
                  fixedHeader: true
                }).render(wrapper);
              }

              document.getElementById('datetime').textContent = `Data calculated at ${data.time}`

              return data.count
            }).then(async d => {
              for (let i=1; i<d; i++) {
                await document.getElementById(`data-${i}`).classList.remove('show')
                await document.getElementById(`data-${i}`).classList.remove('active')
              }
            })
    </script>

</body>
</html>


